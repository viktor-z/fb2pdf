--- C:/PROJECTS/itext/lib/HyphenationTree.java	Wed Dec  2 04:51:32 2009
+++ C:/PROJECTS/itext/src/core/com/itextpdf/text/pdf/hyphenation/HyphenationTree.java	Wed Dec 16 14:30:27 2009
@@ -304,17 +304,17 @@
      * @return a {@link Hyphenation Hyphenation} object representing
      * the hyphenated word or null if word is not hyphenated.
      */
-    public Hyphenation hyphenate(char[] w, int offset, int len,
+    public Hyphenation hyphenate(char[] w, int offset, int origlen,
                                  int remainCharCount, int pushCharCount) {
         int i;
-        char[] word = new char[len + 3];
+        char[] word = new char[origlen + 3];
 
         // normalize word
         char[] c = new char[2];
         int iIgnoreAtBeginning = 0;
-        int iLength = len;
+        int iLength = origlen;
         boolean bEndOfLetters = false;
-        for (i = 1; i <= len; i++) {
+        for (i = 1; i <= origlen; i++) {
             c[0] = w[offset + i - 1];
             int nc = classmap.find(c, 0);
             if (nc < 0) {    // found a non-letter character ...
@@ -334,7 +334,7 @@
                 }
             }
         }
-        len = iLength;
+        int len = iLength;
         if (len < (remainCharCount + pushCharCount)) {
             // word is too short to be hyphenated
             return null;
@@ -386,7 +386,7 @@
             // trim result array
             int[] res = new int[k];
             System.arraycopy(result, 0, res, 0, k);
-            return new Hyphenation(new String(w, offset, len), res);
+            return new Hyphenation(new String(w, offset, origlen), res);
         } else {
             return null;
         }
